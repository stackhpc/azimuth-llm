# Default values for azimuth-llm.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

huggingface:
  # The name of the HuggingFace model to use
  # Use a yaml anchor to avoid duplication elsewhere
  model: &model-name ise-uiuc/Magicoder-S-DS-6.7B
  # A Jinja formatted chat template to provide to the language model.
  # See https://huggingface.co/blog/chat-templates for background info.
  # If not provided, the default template specified in the HuggingFace
  # model repository's tokenizer_config.json file is used. As explained
  # in the above blog post, the HF template key in tokenizer_config.json
  # is relatively new and not all HF models include a template in their
  # repo files yet. This chart value provides a hook to manually apply the
  # correct chat template for such models.
  chatTemplate:

  # For private/gated huggingface models (e.g. Meta's Llama models)
  # you must provide your own huggingface token, for details see:
  # https://huggingface.co/docs/hub/security-tokens

  # To do this, either provide the name of an existing secret on the cluster,
  # which should be created before installing this chart by running
  # `kubectl create secret generic huggingface-token --from-env-file <file-name>`
  # where <file-name> is a file with the following contents:
  # HUGGING_FACE_HUB_TOKEN=<token-value>
  secretName:
  # OR FOR TESTING PURPOSES ONLY, you can instead provide the secret directly
  # as a chart value here (if secretName is set above then it will take priority)
  token:

# Configuration for the backend model serving API
api:
  # Container image config
  image:
    repository: vllm/vllm-openai
    version: v0.3.2
  monitoring:
    enabled: true
  # Service config
  service:
    name: llm-backend
    type: ClusterIP
    zenith:
      enabled: false
      skipAuth: false
      label: Inference API
      iconUrl: https://raw.githubusercontent.com/vllm-project/vllm/v0.2.7/docs/source/assets/logos/vllm-logo-only-light.png
      description: |
        The raw inference API endpoints for the deployed LLM.
  # Config for huggingface model cache volume
  # This is mounted at /root/.cache/huggingface in the api deployment
  cacheVolume:
    hostPath:
      path: /tmp/llm/huggingface-cache
  # Number of gpus to requests for each api pod instance
  # NOTE: This must be in the range 1 <= value <= N, where
  # 'N' is the number of GPUs available in a single
  # worker node on the target Kubernetes cluster.
  # NOTE: According to the vLLM docs found here
  # https://docs.vllm.ai/en/latest/serving/distributed_serving.html
  # distributed / multi-GPU support should be available, though it
  # has not been tested against this app.
  gpus: 1
  # The update strategy to use for the deployment
  # See https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#updating-a-deployment
  # NOTE: Changing this has implications for the number of additional GPU worker nodes required
  # to preform a rolling zero-downtime update
  updateStrategy:
    type: Recreate
  # Extra args to supply to the vLLM backend, see
  # https://github.com/vllm-project/vllm/blob/main/vllm/entrypoints/openai/api_server.py
  extraArgs: []

# Configuration for the frontend web interface
ui:
  # Toggles installation of the gradio web UI
  enabled: true
  # The file from the UI config map to execute as the entrypoint to the frontend app
  entrypoint: app.py
  # The values to be written to settings.yml for parsing as frontend app setting
  # (see example_app.py and config.py for example using pydantic-settings to configure app)
  appSettings:
    hf_model_name: *model-name
    hf_model_instruction: "You are a helpful AI assistant. Please response appropriately."
  # Container image config
  image:
    repository: ghcr.io/stackhpc/azimuth-llm-ui-base
    version: "0.2.0-rc1"
  # Service config
  service:
    name: web-app
    type: ClusterIP
    zenith:
      enabled: true
      skipAuth: false
      label: Chat Interface
      iconUrl: https://raw.githubusercontent.com/gradio-app/gradio/5524e590577769b0444a5332b8d444aafb0c5c12/js/app/public/static/img/logo.svg
      description: |
        A web-based user inferface for interacting with the deployed LLM.
  # Optional config for an ingress resource to expose the UI
  ingress:
    # The name of the ingress resource to create (default: Release.Name)
    name:
    # Any annotations to apply to the ingress resource
    # (e.g. for cert-manager TLS integration)
    annotations: {}
    # The domain name to use for the ingress resource.
    # If host is not set then ingress support will be disabled and
    # no ingress resource will be created.
    # NOTE: If ingress is enabled, an ingress controller must be installed
    # on the target cluster before installing this chart.
    # For example, see https://kubernetes.github.io/ingress-nginx/deploy/
    # TODO: Check what happens if ingress is enabled without a controller deployed
    # (probably nothing, just an unused ingress resource will be created)
    host:
  # The update strategy to use for the deployment
  updateStrategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%

reloader:
  watchGlobally: false
